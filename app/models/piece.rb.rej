diff a/app/models/piece.rb b/app/models/piece.rb	(rejected hunks)
@@ -1,6 +1,7 @@
 # Piece will hold all similar logic for all pieces.
 class Piece < ApplicationRecord
   after_initialize :set_default_state
+  # before_save :update_en_passant_posistion
   belongs_to :game
 
   self.inheritance_column = :piece_type
@@ -15,42 +16,32 @@ class Piece < ApplicationRecord
     "#{color.downcase}_#{piece_type.downcase}.png"
   end
 
+  # def update_en_passant_posistion
+  #   game.update_attributes en_passant_posistion: nil
+  # end
+
   def en_passant_possible?(x, y)
     return false unless y_diff(y) == 2 && piece_type == 'Pawn'
     [valid_adjacent_en_passant_pawn?(x, y, true), valid_adjacent_en_passant_pawn?(x, y, false)].include?(true)
-  end 
+  end
 
   def valid_adjacent_en_passant_pawn?(x, y, left)
     side_piece = find_piece(x + (left ? -1 : 1), y)
     return false if side_piece.nil?
-    return true if side_piece.type == 'Pawn' && side_piece.color != color 
-    false 
-  end 
+    return true if side_piece.type == 'Pawn' && side_piece.color != color
+    false
+  end
 
   def y_diff(y)
     (y_position - y).abs
-  end 
+  end
 
   def move_to!(x, y)
-    if color == game.user_turn
-      if valid_move?(x, y) && space_available?(x, y) && not_into_check?(x, y)
-        capture_piece_at!(x, y) if occupied_by_opposing_piece?(x, y)
-        game.pass_turn!(game.user_turn)
-        change_location(x, y)
-      elsif !occupied_by_opposing_piece?(x, y)
-        false
-      elsif piece_type == 'King' && valid_move?(x, y) && space_available?(x, y) && not_into_check(x, y)
-        if legal_castle_move?
-          if castle!
-            game.pass_turn!(game.user_turn)
-          end
-        else
-          standard_king_move?(x, y)
-          game.pass_turn!(game.user_turn)
-        end 
-      else
-        false
-      end
+    return unless color == game.user_turn
+    if valid_move?(x, y) && space_available?(x, y) && not_into_check?(x, y)
+      capture_piece_at!(x, y) if occupied_by_opposing_piece?(x, y)
+      game.pass_turn!(game.user_turn)
+      change_location(x, y)
     end
   end
 
